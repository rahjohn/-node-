<%/****************************************************************************************
 This comment is inside JavaScript exit marks, so it will not render on that HTML page.
 This page contains the HTML for the /memes path.  This page is populated with images from
 the database.  There is a real life element to this page which you will explore and
 utilize in Part 1 of this lab.  The extension EJS stands for Embedded JavaScript and
 is HTML built by JavaScript. (similar to when we used PHP combined with HTML) Populate this
 page similar to memes.ejs but with images from a single user instead of all users.
 ***************************************************************************************/%>

<!DOCTYPE html>
<html>
<head>


    <meta charset='utf-8'/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script type='text/javascript' src="http://code.jquery.com/jquery-latest.min.js"></script>
    <script type='text/javascript' src='/js/bootstrap.min.js'></script>
    <script type='text/javascript' src="/socket.io/socket.io.js"></script>

    <link rel='stylesheet' type='text/css' href='/css/bootstrap.min.css'/>
    <link rel='stylesheet' type='text/css' href='/css/bootstrap-responsive.min.css'/>
    <link rel='stylesheet' type='text/css' href='/css/style.css'/>

    <title>MEMES!</title>

</head>
<body class="bd" background="//tipministries.com/wp-content/uploads/2015/11/Grey-Background-48-1024x618.jpg">
<div class='navbar navbar-inverse'>
    <div class='navbar-inner'>
        <div class='container'>
            <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <div class='nav-collapse collapse'>
                <ul class='nav'>
                    <li id='home-nav-item'><a href='/memes'>Memes</a></li>
                    <%if (user === 1) {%>
                    <li id='home-nav-item'><a href='/login'>Login</a></li>
                    <%} else {%>
                    <li id='home-nav-item'><a href='/memes/logout'>Logout</a></li>
		    <li id='home-nav-item'><a href='http://192.168.190.d53/Default.aspx?email=<%=user._json.email%>&name=<%=user.name.givenName%>'>Create Meme</a></li>
                    <%}%>
                </ul>
                <ul class='nav pull-right'>
                    <li><a href='#'>Welcome
                            <!--You will want to add code here (PART 2) to allow you to display a custom message if a user is logged in (Welcome Bob!) or a generic message if no one is logged into the site (Welcome Guest User).  Similarly,
                            if a user is not logged in you want a login button to display and no logout button, but if a user is logged in then you want to display a logout button.  You may need to break in and out of Node JS several times using "< % % >" and "< %= % >"-->
                            <%if (user === 1){%>
                            Guest User
                        </a></li>
                    <%} else {%>
                    <%= user.displayName%>!
                    </a></li>
                    <%for (j=0; j<userList.length; j++){%>
                    <%if (userList[j].userName == user.name.givenName && userList[j].admin == 1){%>
                    <li><a href="/admin">Admin</a></li>
                    <%}%>
                    <%}%>
                    <%}%>
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <!-- If you uncomment the following line it will display a time stamp for the last time that the page was refreshed by the websockets, there is a line that needs to be uncommented near the end of the file as well.  This might be useful for part 2 of this lab to make sure the socket is working -->
    <time></time>
    <div id="wrapper">
        <div id="columns">
            <!-- The following line breaks out of html into NodeJS to process data passed to the view
            from the controller. The "< % % >" indicates that you are breaking out of and then back into html.
            Notice that the open bracket for the for loop starts here, but ends after the html, meaning that
            the html between will be printed each time through the loop-->
            <% for(i=0; i < imageList.length; i++ ){ %>

            <!-- The following line breaks out of html into NodeJS to process data passed to the view from the controller. The "< % % >" indicates that you are breaking out of and then back into html. -->
            <% for(j=0; j < userList.length; j++ ){ %>

            <!-- The following line breaks out of html into NodeJS to process data passed to the view from the controller. The "< % % >" indicates that you are breaking out of and then back into html. -->
            <% if (userList[j].userId === imageList[i].userId){ %>

            <!-- Here is are examples of printing out a variable's value with "< %= % >" -->
            <div class="pin back-image" id="block<%= imageList[i].imageId %>" >
                <img src="<%=imageList[i].imagePath%>"   alt="<%=imageList[i].altText%>">

                <!-- this button is for "liking" the image. It passes the image id as the first parameter and the button's id as the second parameter -->
                <button class="btn btn-primary btn-mini float-left" id="like<%=imageList[i].imageId %>" type="button" onClick="updateLikeCount(<%=imageList[i].imageId%>, this.id);">Likes: <%=imageList[i].numLikes%></button><br>
            </div>
            <% } %>
            <% } %>
            <% } %>
        </div>
    </div>
</div>

<script>
    // creating a new websocket
    var socket = io.connect('http://192.168.12.122:1337');//change this IP address to the IP address of your server.

    // on notification (socket updated) add the new meme(s) inside the '#columns' div. This notification is coming from server.js

    socket.on('notification', function (data) {
        var imagesListLength = data.images.length;
        var imageArray = data.images;
        var userArray = data.users;

        /* DO WORK HERE IN PART 2!  This gives you all of the information being passed from the socket to the browser.
         You need to figure out how to use that data to update the page when a new image is added to the database and the file structure.
         We recommend using the Jquery ".append()" function.  You will need a couple of for loops and if statements with the append() function.*/

        //If you what the '<time></time>' div to update with a time stamp you will need to uncomment both that line and the following line.
        var insideHTML = "";
        for(i=0; i< imageArray.length; i++){
            for(j=0; j< userArray.length; j++){
                var url = window.location.pathname;
                var filename = url.substring(url.lastIndexOf('/')+1);
                if(userArray[j].userId === imageArray[i].userId && filename === userArray[j].userName){
                    insideHTML += '<div class="pin back-image" id="block' + imageArray[i].imageId + '" ><img src="' + imageArray[i].imagePath + '"   alt="' + imageArray[i].altText + '"><button class="btn btn-primary btn-mini float-left" id="like' + imageArray[i].imageId + '" type="button" onClick="updateLikeCount(' + imageArray[i].imageId + ', this.id);">Likes: ' + imageArray[i].numLikes + '</button><br><a class="btn btn-info btn-mini" style="margin-top:5px;" href="/memes/' + userArray[j].userName + '">More by ' + userArray[j].userName + '</a></div>';
                }
            }
        }
        $("#columns").html(insideHTML);
        $('time').html('Last Update:' + data.time);
    });



    // This function is called when the like button is clicked (see above where like button is added).
    function updateLikeCount(imageId, buttonId){

        //You will need to use socket.emit to send information to the server (server.js).  Use the function name (also called 'tag') 'button_click'.
        <%if (user !== 1) {%>
            socket.emit('button_click', imageId, buttonId);
        <%} else {%>
            alert("Please login to like images");
        <%}%>
    }



    // This function runs at the return of updateLikeCount (above) after it runs through the server.js file
    socket.on('return_click', function (newImage, buttonId){

        //You will need to add jquery here to update the text for the button containing the like count.
        $("#" + buttonId).html("Likes: " + newImage.numLikes);
    });

</script>
</body>
</html>
